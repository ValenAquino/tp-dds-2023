@startuml TPA3-Clases

hide empty members

' Supermercado, Centro Comunal, Banco, ...
class Entidad {
  nombre: String
  ' localizacion: Localizacion
  tipoDeEntidad: TipoDeEntidad
  establecimientos: List<Establecimiento>
  --
  tieneServicio(Servicio)
}

' Sucursal, Estacion, ...
class Establecimiento {
  nombre: String
  servicios: List<Servicio>
  --
  agregarServicio(Servicio)
  removerServicio(Servicio)
  tieneServicio(Servicio)
}

class Servicio {
  descripcion: String
  tipoDeServicio: TipoDeServicio
  incidentes: List<Incidente>
}

enum TipoDeServicio {
  ESCALERAS_MECANICAS
  ASCENSORES
  BAÑOS
}

enum TipoDeEntidad {
  SUBTERRANEO
  FERROCARRIL
  SUPERMERADO
  BANCO
}

class Usuario {
  usuario: String
  contraseña: String
  nombre: String
  apellido: String
  correoElectronico: String
  entidadesDeInteres: List<Entidad>
  ' localizacion: Localizacion
  medioDeComunicacion: MedioDeComunicacion
  calendarioNotificaciones: CalendarioNotificaciones
  --
  cambiarMedioDeComunicacion()
  notificarIncidente(Incidente)
  interesadoEn(Servicio)
}

class RangoHorario {
  inicio: LocalTime
  fin: LocalTime
  --
  contiene(LocalTime)
}

class CalendarioNotificaciones {
  horarios: Map<DayOfWeek, RangoHorario>
  --
  agregarHorario(DayOfWeek, LocalTime, LocalTime)
  eliminarHorario(DayOfWeek)
  abarcaA(DateTime)
}

interface MedioDeComunicacion {
  --
  notificar()
}
class MedioWhatsApp {
  --
  notificar()
}
class MedioEmail {
  --
  notificar()
}

/'
class Localizacion {
  nombre: String
  latitud: Double
  longitud: Double
  tipoDeLocalizacion: TipoDeLocalizacion
}

enum TipoDeLocalizacion {
  DEPARTAMENTO
  MUNICIPIO
  PROVINCIA
}
'/

class OrganismoDeControl {
  nombre: String
  correoElectronico: String
  responsableDeInformes: Usuario
  entidadesControladas: List<Entidad>
  --
  asignarResponsable()
  agregarEntidad()
  getEntidades()
}

class Incidente {
  servicioAfectado: Servicio
  observaciones: String
  fecha: DateTime
  resuelto: Boolean
  fechaResolucion: DateTime
}

class Comunidad {
  serviciosDeInteres: List<Servicio>
  usuarios: List<Usuario>
  incidentes: List<Incidente>
  --
  abrirIncidente(Servicio)
  getUsuariosInteresados(Servicio)
  cerrarIncidente(Incidente)
}

'class RepositorioOrganismosDeControl {
'  organismosDeControl: List<OrganismoDeControl>
'  --
'  agregarOrganismoDeControl()
'  eliminarOrganismoDeControl()
'}

class GeneradorRankingSemanal {
  criterios : List<criterioDeOrdenamiento>
  organismo : OrganismoDeControl
  rankings : List<Ranking>
  --
  generarRanking(criterio)
  generarRankingSemanal()
}

class Ranking {
  fecha: DateTime
  ranking: List<Entidad>
  criterioElegido: String
}

abstract class CriterioDeOrdenamiento {
  nombre: String
  ---
  ordenar(listaEntidades)
}

class PromedioCierre {
  ordenar(listaEntidades)
}

class CantidadIncidentes {
  ordenar(listaEntidades)
}

'RepositorioOrganismosDeControl -u-> OrganismoDeControl
GeneradorRankingSemanal -> OrganismoDeControl
GeneradorRankingSemanal -d> "*" CriterioDeOrdenamiento
GeneradorRankingSemanal --> "*" Ranking

CriterioDeOrdenamiento <|.. PromedioCierre
CriterioDeOrdenamiento <|.d. CantidadIncidentes

Usuario -u-> MedioDeComunicacion
Usuario -l-> CalendarioNotificaciones

Usuario -->"*" Entidad
Establecimiento ->"*" Servicio
Comunidad ->"*" Servicio
Incidente --> Servicio

CalendarioNotificaciones -->"*" RangoHorario
Entidad ->"*" Establecimiento
Entidad -> TipoDeEntidad
Servicio --> TipoDeServicio
Servicio -u-> "*" Incidente
' Localizacion <- Usuario
' Localizacion <- Entidad
' TipoDeLocalizacion -> Localizacion
Entidad "entidadesControladas *"<-- OrganismoDeControl
Usuario "*"<- Comunidad
Comunidad ->"*" Incidente
MedioWhatsApp ..|> MedioDeComunicacion
MedioEmail ..|> MedioDeComunicacion

@enduml